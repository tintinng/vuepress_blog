(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{409:function(t,v,a){"use strict";a.r(v);var _=a(25),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"javascript代码执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript代码执行流程"}},[t._v("#")]),t._v(" JavaScript代码执行流程")]),t._v(" "),a("h3",{attrs:{id:"编译阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[t._v("#")]),t._v(" 编译阶段")]),t._v(" "),a("ul",[a("li",[t._v("输入：一段JavaScript代码")]),t._v(" "),a("li",[t._v("输出：执行上下文 + 可执行代码\n"),a("ul",[a("li",[a("strong",[t._v("变量对象")]),t._v(" ：上下文中的var变量和函数都存在这个对象上，js无法访问")]),t._v(" "),a("li",[a("strong",[t._v("词法对象")]),t._v("：上下文中的let、const和块级作用域会放在这个对象上")])])]),t._v(" "),a("li",[t._v("变量提升：在创建执行上下文时，把函数声明和var声明的变量放入变量对象中")]),t._v(" "),a("li",[t._v("let和const声明的变量会放入词法环境对象中")]),t._v(" "),a("li",[t._v("函数定义的时候会创建作用域链，装载包含上下文的变量对象")])]),t._v(" "),a("h3",{attrs:{id:"执行阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),a("ul",[a("li",[t._v("把当前上下文的变量对象推入作用域链最前端")]),t._v(" "),a("li",[t._v("按顺序执行可执行代码")])]),t._v(" "),a("h2",{attrs:{id:"执行上下文与调用栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与调用栈"}},[t._v("#")]),t._v(" 执行上下文与调用栈")]),t._v(" "),a("h3",{attrs:{id:"上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文"}},[t._v("#")]),t._v(" 上下文")]),t._v(" "),a("ul",[a("li",[t._v("执行全局代码的时候————编译全局代码并创建"),a("strong",[t._v("全局执行上下文")]),t._v(" "),a("ul",[a("li",[t._v("全局上下文对应的变量对象就是window")])])]),t._v(" "),a("li",[t._v("调用一个函数的时候————编译函数体内的代码并创建"),a("strong",[t._v("函数执行上下文")]),t._v(" "),a("ul",[a("li",[t._v("箭头函数并不会创建自身的执行上下文，使用包含上下文的this")])])]),t._v(" "),a("li",[t._v("使用eval的时候————eval的代码被编译并创建"),a("strong",[t._v("eval执行上下文")])])]),t._v(" "),a("h3",{attrs:{id:"管理执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理执行上下文"}},[t._v("#")]),t._v(" 管理执行上下文")]),t._v(" "),a("ul",[a("li",[t._v("创建执行上下文的时候入栈")]),t._v(" "),a("li",[t._v("销毁执行上下文的时候出栈")])]),t._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("定义变量的区域，决定了变量的生命周期和可访问范围")])]),t._v(" "),a("li",[t._v("window对象中的变量的作用域就是全局作用域")])]),t._v(" "),a("h3",{attrs:{id:"全局作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[t._v("#")]),t._v(" 全局作用域")]),t._v(" "),a("ul",[a("li",[t._v("伴随页面的生命周期，在代码中任何地方都可以访问")])]),t._v(" "),a("h3",{attrs:{id:"函数作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),a("ul",[a("li",[t._v("在函数内部定义的变量，只能在函数内部被访问")])]),t._v(" "),a("h3",{attrs:{id:"块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域"}},[t._v("#")]),t._v(" 块级作用域")]),t._v(" "),a("ul",[a("li",[t._v("let关键字和const关键字支持")]),t._v(" "),a("li",[t._v("块级作用域是通过词法环境来实现的")]),t._v(" "),a("li",[t._v("在词法环境内部维持了一个小型栈结构，栈底是函数最外层的变量。进入一个作用域块后，就会把该作用域块内部的变量压到栈顶；当作用域执行完成后，该作用域的信息就会从栈顶弹出")])]),t._v(" "),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("ul",[a("li",[t._v("上下文中的代码在执行的时候，会创建变量环境对象的一个作用域链，决定了各级上下文中的代码在访问变量和函数时的顺序。")]),t._v(" "),a("li",[t._v("作用域链在定义函数的时候就会创建好，在执行的时候会把函数的上下文对应的变量对象放入作用域链的首部")]),t._v(" "),a("li",[t._v("理解：一个链表，头节点为当前变量对象，尾节点必为全局变量对象。"),a("strong",[t._v("作用域链由词法作用域决定，词法作用域由代码结构来确定，不是在调用栈中找")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);